
events {
}

http {
    # NGINX performs its own name resolution, and we need to tell it how to do that.
    # 
    # We want this service to be able to route requests to apps on apps.internal, so we will use
    # the first resolver defined for the container in which the app is running.
    # 
    # We do this by populating the NAMESERVER environment variable at startup time. See the code in 
    # .profile for how this is done. NOTE: In future, we should be able to use a feature native 
    # to the buildpack to do this: https://github.com/cloudfoundry/nginx-buildpack/pull/12
    # 
    # We know that Cloud Foundry's internal ipv6 routing is immature, so we'll also opt to only 
    # do ipv4 resolution.
    resolver {{env "NAMESERVER"}} ipv6=off;   

    # Set up a few variables we'll use later
    map $http_upgrade $connection_upgrade {
      default upgrade;
      ''      close;
    }

    server {
        # Bind to the Cloud Foundry-provided HTTP port
        listen {{port}} default_server;

        # Uncomment this line to make it easy to see rewrites happening in the logs
        rewrite_log on;

        # Ensure any path with just one element ends with a slash
        rewrite ^/([^/]+)$ /$1/ redirect;

        location /iris/ {
            rewrite ^/iris/(.*)$ /$1 break;
            proxy_pass $scheme://iris.apps.internal:8080/$uri;
            proxy_redirect $scheme://iris.apps.internal:8080 $scheme://$host/iris/;

            # Ensure we properly support WebSocket connection upgrades and keepalives.
            # From https://support.rstudio.com/hc/en-us/articles/213733868-Running-Shiny-Server-with-a-Proxy
            proxy_http_version 1.1;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Upgrade $http_upgrade;
            proxy_read_timeout 20d;
            proxy_buffering off;
        }   

        # Defines a simple status page that can be used as a health-check of this proxy, 
        # rather than making requests to an upstream.
        location /nginx_status {
            stub_status on;

            access_log on;
            allow all;
        }
    }
}
